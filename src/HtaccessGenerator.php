<?php

namespace YoBuild\Generators;

/**
 * Enhanced Security Htaccess Generator with comprehensive protection measures
 * Updated to work with configuration file system
 */
class HtaccessGenerator {
	/** @var array Configuration values */
	private array $config = [];

	/**
	 * Constructor to initialize configuration
	 */
	public function __construct(array $config = []) {
		$this->config = $this->mergeWithDefaults($config);
	}

	/**
	 * Merge user config with default values
	 */
	private function mergeWithDefaults(array $userConfig): array {
		$defaults = [
			// Basic Options
			'domain'                      => '',
			'cdn_domains'                 => [],
			'cors_domains'                => [],

			// Feature Flags
			'follow_symlinks'             => false,
			'directory_indexing'          => false,
			'force_https'                 => true,
			'pretty_urls'                 => false,
			'pretty_urls_config'          => [
					'handler_file'             => 'index.php',
					'mode'                     => 'front-controller',
					'excluded_directories'     => ['assets', 'css', 'js', 'images', 'uploads', 'admin', 'api'],
					'excluded_extensions'      => ['.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.ico', '.txt', '.xml', '.json', '.pdf', '.zip', '.svg', '.woff', '.woff2', '.ttf', '.eot'],
					'force_trailing_slash'     => false,
					'query_string_passthrough' => true,
					'url_parameter_name'       => 'url'
				],
			'compression'                 => true,
			'use_webp'                    => true,
			'utf8_charset'                => true,
			'wildcard_subdomains'         => false,
			'enable_caching'              => false,
			'enable_gzip_compression'     => false,
			'cache_html_duration'         => '1 month',
			'cache_images_duration'       => '1 year',
			'cache_css_duration'          => '1 month',
			'cache_js_duration'           => '1 month',

			// Security Options
			'security_headers'            => true,
			'content_security_policy'     => true,
			'cors_headers'                => true,
			'block_bad_bots'              => true,
			'protect_sensitive_files'     => true,
			'ip_blacklist'                => [],
			'ip_whitelist'                => [],
			'country_blacklist'           => [],
			'request_rate_limiting'       => true,
			'max_requests_per_second'     => 10,
			'file_upload_protection'      => true,
			'xss_protection'              => true,
			'clickjacking_protection'     => true,
			'mime_sniffing_protection'    => true,
			'protect_wp_admin'            => false,
			'protect_php_files'           => true,
			'block_php_upload_exec'       => true,
			'sanitize_server_tokens'      => true,
			'additional_security_headers' => false,

			// SSL Requirements
			'ssl_requirements'            => [
					'min_version'        => 'TLSv1.2',
					'enforce_hsts'       => true,
					'hsts_max_age'       => 31536000,
					'include_subdomains' => true,
					'preload'            => true
				],
			'ssl_forcing'                 => 'none',

			// WWW/Non-WWW Redirection
			'www_redirection'             => 'none',

			// Error Pages
			'error_pages'                 => [
					'400' => null,
					'401' => null,
					'403' => null,
					'404' => null,
					'500' => null
				],

			// Access Control
			'access_control_enabled'      => false,
			'access_control_list'         => [],

			// Custom MIME Types
			'custom_mime_types_enabled'   => false,
			'custom_mime_types'           => [],

			// Redirect Management
			'redirect_management_enabled' => false,
			'redirect_list'               => [],

			// Hotlink Protection
			'hotlink_protection_enabled'  => false,
			'hotlink_protection_list'     => [],

			// Custom Options
			'custom_document_root'        => null,
			'image_placeholder'           => null,
			'custom_rules'                => []
		];

		return array_merge($defaults, $userConfig);
	}

	/**
	 * Set a configuration option
	 */
	public function setOption(string $key, mixed $value): void {
		$this->config[$key] = $value;
	}

	/**
	 * Generate the htaccess content
	 */
	public function generate(): string {
		$lines = [];

		// Add generation timestamp
		$lines[] = '# Generated by Enhanced .htaccess Generator';
		$lines[] = '# Generated on: ' . date('Y-m-d H:i:s T');
		$lines[] = '# Domain: ' . ($this->config['domain'] ?: 'Not specified');
		$lines[] = '';

		// Server Tokens
		if ($this->config['sanitize_server_tokens']) {
			$lines[] = '# Hide server information';
			$lines[] = 'ServerSignature Off';
			$lines[] = 'ServerTokens Prod';
			$lines[] = '';
		}

		// Basic Options
		$this->addBasicOptions($lines);

		// Security Configuration
		$this->addSecurityConfiguration($lines);

		// Access Control
		$this->addAccessControl($lines);

		// HTTPS and SSL Configuration
		$this->addSSLConfiguration($lines);

		// Performance Optimizations
		$this->addPerformanceOptimizations($lines);

		// URL Management
		$this->addURLManagement($lines);

		// File Protection
		$this->addFileProtection($lines);

		// Error Pages
		$this->addErrorPages($lines);

		// Custom Configurations
		$this->addCustomConfigurations($lines);

		return implode("\n", $lines);
	}

	/**
	 * Add basic Apache options
	 */
	private function addBasicOptions(array &$lines): void {
		$lines[] = '# ================================';
		$lines[] = '# BASIC APACHE OPTIONS';
		$lines[] = '# ================================';

		if ($this->config['follow_symlinks']) {
			$lines[] = 'Options +FollowSymLinks';
		}

		if (!$this->config['directory_indexing']) {
			$lines[] = 'Options -Indexes -MultiViews';
		}

		// UTF-8 Charset
		if ($this->config['utf8_charset']) {
			$lines[] = '';
			$lines[] = '# Force UTF-8 encoding';
			$lines[] = 'AddDefaultCharset utf-8';
			$lines[] = 'AddCharset utf-8 .atom .css .js .json .rss .vtt .xml';
		}

		// Rewrite Engine
		$lines[] = '';
		$lines[] = '# Enable URL rewriting';
		$lines[] = 'RewriteEngine On';
		$lines[] = 'RewriteBase /';
		$lines[] = '';
	}

	/**
	 * Add comprehensive security configuration
	 */
	private function addSecurityConfiguration(array &$lines): void {
		$lines[] = '# ================================';
		$lines[] = '# SECURITY CONFIGURATION';
		$lines[] = '# ================================';

		// Security Headers
		if ($this->config['security_headers'] || $this->config['additional_security_headers']) {
			$lines[] = '';
			$lines[] = '<IfModule mod_headers.c>';
			$lines[] = "\t# Basic security headers";
			$lines[] = "\tHeader always set X-Content-Type-Options \"nosniff\"";

			if ($this->config['clickjacking_protection']) {
				$lines[] = "\tHeader always set X-Frame-Options \"SAMEORIGIN\"";
			}

			if ($this->config['xss_protection']) {
				$lines[] = "\tHeader always set X-XSS-Protection \"1; mode=block\"";
			}

			if ($this->config['additional_security_headers']) {
				$lines[] = "\t# Additional security headers";
				$lines[] = "\tHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"";
				$lines[] = "\tHeader always set Permissions-Policy \"geolocation=(), midi=(), sync-xhr=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), fullscreen=(self), payment=()\"";
				$lines[] = "\tHeader always set Cross-Origin-Embedder-Policy \"require-corp\"";
				$lines[] = "\tHeader always set Cross-Origin-Opener-Policy \"same-origin\"";
				$lines[] = "\tHeader always set Cross-Origin-Resource-Policy \"same-origin\"";
			}

			$lines[] = '</IfModule>';
		}

		// Content Security Policy
		if ($this->config['content_security_policy']) {
			$this->addContentSecurityPolicy($lines);
		}

		// CORS Headers
		if ($this->config['cors_headers'] && !empty($this->config['cors_domains'])) {
			$this->addCORSHeaders($lines);
		}

		// Rate Limiting
		if ($this->config['request_rate_limiting']) {
			$lines[] = '';
			$lines[] = '# Rate limiting protection';
			$lines[] = '<IfModule mod_ratelimit.c>';
			$lines[] = "\tSetOutputFilter RATE_LIMIT";
			$lines[] = "\tSetEnv rate-limit {$this->config['max_requests_per_second']}";
			$lines[] = '</IfModule>';
		}

		// Block Bad Bots
		if ($this->config['block_bad_bots']) {
			$lines[] = '';
			$lines[] = '# Block bad bots and crawlers';
			$lines[] = 'RewriteCond %{HTTP_USER_AGENT} ^.*(robot|spider|crawler|wget|curl|uniform|loader|grab|slurp|Bot|bot|python|harvest|scan|winhttp|clshttp|loader|email|extract|fetch).*$ [NC]';
			$lines[] = 'RewriteRule ^ - [F,L]';
		}

		$lines[] = '';
	}

	/**
	 * Add Content Security Policy
	 */
	private function addContentSecurityPolicy(array &$lines): void {
		$lines[] = '';
		$lines[] = '# Content Security Policy';
		$lines[] = '<IfModule mod_headers.c>';

		$csp = [
			"default-src 'self'",
			"script-src 'self' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval'",
			"style-src 'self' 'unsafe-inline'",
			"img-src 'self' data: https:",
			"font-src 'self'",
			"connect-src 'self'",
			"media-src 'self'",
			"object-src 'none'",
			"frame-src 'self'",
			"worker-src 'self'",
			"frame-ancestors 'self'",
			"form-action 'self'",
			"base-uri 'self'",
			"manifest-src 'self'",
			"upgrade-insecure-requests",
			"block-all-mixed-content"
		];

		// Add CDN domains to CSP
		if (!empty($this->config['cdn_domains'])) {
			$cdnList = implode(' ', $this->config['cdn_domains']);
			$csp[1] .= " $cdnList";
			$csp[2] .= " $cdnList";
			$csp[3] .= " $cdnList";
		}

		$lines[] = "\tHeader always set Content-Security-Policy \"" . implode('; ', $csp) . "\"";
		$lines[] = '</IfModule>';
	}

	/**
	 * Add CORS headers
	 */
	private function addCORSHeaders(array &$lines): void {
		$lines[] = '';
		$lines[] = '# CORS Configuration';
		$lines[] = '<IfModule mod_headers.c>';

		$allowedOrigins = implode('|', array_map('preg_quote', $this->config['cors_domains']));
		$lines[] = "\tSetEnvIf Origin \"^https?://($allowedOrigins)$\" CORS_ORIGIN=\$0";
		$lines[] = "\tHeader always set Access-Control-Allow-Origin %{CORS_ORIGIN}e env=CORS_ORIGIN";
		$lines[] = "\tHeader always set Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\"";
		$lines[] = "\tHeader always set Access-Control-Allow-Headers \"Content-Type, Authorization, X-Requested-With\"";
		$lines[] = "\tHeader always set Access-Control-Allow-Credentials \"true\"";
		$lines[] = "\tHeader always set Access-Control-Max-Age \"3600\"";
		$lines[] = "\tHeader always set Vary \"Origin\"";

		$lines[] = '</IfModule>';
	}

	/**
	 * Add access control (IP blocking/allowing)
	 */
	private function addAccessControl(array &$lines): void {
		// IP Blacklist
		if (!empty($this->config['ip_blacklist'])) {
			$lines[] = '# IP Blacklist';
			$lines[] = 'Order Allow,Deny';
			$lines[] = 'Allow from all';
			foreach ($this->config['ip_blacklist'] as $ip) {
				$lines[] = "Deny from $ip";
			}
			$lines[] = '';
		}

		// IP Whitelist (overrides blacklist)
		if (!empty($this->config['ip_whitelist'])) {
			$lines[] = '# IP Whitelist (restrictive - only these IPs allowed)';
			$lines[] = 'Order Deny,Allow';
			$lines[] = 'Deny from all';
			foreach ($this->config['ip_whitelist'] as $ip) {
				$lines[] = "Allow from $ip";
			}
			$lines[] = '';
		}

		// Country Blocking
		if (!empty($this->config['country_blacklist'])) {
			$lines[] = '# Country Blocking (requires GeoIP module)';
			$countries = implode('|', $this->config['country_blacklist']);
			$lines[] = "SetEnvIf GEOIP_COUNTRY_CODE ^($countries)$ BlockCountry";
			$lines[] = 'Order Allow,Deny';
			$lines[] = 'Allow from all';
			$lines[] = 'Deny from env=BlockCountry';
			$lines[] = '';
		}

		// Access Control List
		if ($this->config['access_control_enabled'] && !empty($this->config['access_control_list'])) {
			$lines[] = '# Custom Access Control';
			foreach ($this->config['access_control_list'] as $entry) {
				if (filter_var($entry, FILTER_VALIDATE_IP)) {
					$lines[] = "Require not ip $entry";
				} else {
					$lines[] = "BrowserMatchNoCase \"$entry\" BlockUserAgent";
					$lines[] = 'Order Allow,Deny';
					$lines[] = 'Allow from all';
					$lines[] = 'Deny from env=BlockUserAgent';
				}
			}
			$lines[] = '';
		}
	}

	/**
	 * Add SSL/HTTPS configuration
	 */
	private function addSSLConfiguration(array &$lines): void {
		$lines[] = '# ================================';
		$lines[] = '# SSL/HTTPS CONFIGURATION';
		$lines[] = '# ================================';

		// Force HTTPS
		if ($this->config['force_https'] || $this->config['ssl_forcing'] === 'entire-site') {
			$lines[] = '';
			$lines[] = '# Force HTTPS redirect';
			$lines[] = 'RewriteCond %{HTTPS} off';
			$lines[] = 'RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]';
		}

		// HSTS (HTTP Strict Transport Security)
		if ($this->config['ssl_requirements']['enforce_hsts']) {
			$lines[] = '';
			$lines[] = '# HTTP Strict Transport Security (HSTS)';
			$lines[] = '<IfModule mod_headers.c>';

			$hsts = "max-age={$this->config['ssl_requirements']['hsts_max_age']}";
			if ($this->config['ssl_requirements']['include_subdomains']) {
				$hsts .= '; includeSubDomains';
			}
			if ($this->config['ssl_requirements']['preload']) {
				$hsts .= '; preload';
			}

			$lines[] = "\tHeader always set Strict-Transport-Security \"$hsts\"";
			$lines[] = '</IfModule>';
		}

		$lines[] = '';
	}

	/**
	 * Add performance optimizations
	 */
	private function addPerformanceOptimizations(array &$lines): void {
		$lines[] = '# ================================';
		$lines[] = '# PERFORMANCE OPTIMIZATIONS';
		$lines[] = '# ================================';

		// Gzip Compression
		if ($this->config['compression'] || $this->config['enable_gzip_compression']) {
			$lines[] = '';
			$lines[] = '# Gzip Compression';
			$lines[] = '<IfModule mod_deflate.c>';
			$lines[] = "\tSetOutputFilter DEFLATE";
			$lines[] = "\tAddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript";
			$lines[] = "\tAddOutputFilterByType DEFLATE application/javascript application/x-javascript";
			$lines[] = "\tAddOutputFilterByType DEFLATE application/xml application/xml+rss application/xhtml+xml";
			$lines[] = "\tAddOutputFilterByType DEFLATE application/rss+xml application/json";
			$lines[] = "\t# Don't compress images and other binary files";
			$lines[] = "\tSetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|pdf|zip|rar|exe)$ no-gzip dont-vary";
			$lines[] = '</IfModule>';
		}

		// Browser Caching
		if ($this->config['enable_caching']) {
			$this->addCacheHeaders($lines);
		}

		// WebP Support
		if ($this->config['use_webp']) {
			$lines[] = '';
			$lines[] = '# WebP Image Support';
			$lines[] = '<IfModule mod_rewrite.c>';
			$lines[] = "\tRewriteCond %{HTTP_ACCEPT} image/webp";
			$lines[] = "\tRewriteCond %{REQUEST_FILENAME} \\.(jpe?g|png)$";
			$lines[] = "\tRewriteCond %{REQUEST_FILENAME}.webp -f";
			$lines[] = "\tRewriteRule (.+)\\.(jpe?g|png)$ \$1.\$2.webp [T=image/webp,E=accept:1]";
			$lines[] = '</IfModule>';
		}

		$lines[] = '';
	}

	/**
	 * Add cache headers for different file types
	 */
	private function addCacheHeaders(array &$lines): void {
		$lines[] = '';
		$lines[] = '# Browser Caching';
		$lines[] = '<IfModule mod_expires.c>';
		$lines[] = "\tExpiresActive On";

		// Convert duration strings to Apache format
		$durations = [
			'1 day'    => '1 day',
			'1 week'   => '1 week',
			'1 month'  => '1 month',
			'6 months' => '6 months',
			'1 year'   => '1 year'
		];

		// HTML files
		$htmlDuration = $durations[$this->config['cache_html_duration']] ?? '1 month';
		$lines[] = "\tExpiresByType text/html \"access plus $htmlDuration\"";

		// CSS files
		$cssDuration = $durations[$this->config['cache_css_duration']] ?? '1 month';
		$lines[] = "\tExpiresByType text/css \"access plus $cssDuration\"";

		// JavaScript files
		$jsDuration = $durations[$this->config['cache_js_duration']] ?? '1 month';
		$lines[] = "\tExpiresByType application/javascript \"access plus $jsDuration\"";
		$lines[] = "\tExpiresByType text/javascript \"access plus $jsDuration\"";

		// Images
		$imageDuration = $durations[$this->config['cache_images_duration']] ?? '1 year';
		$lines[] = "\tExpiresByType image/jpg \"access plus $imageDuration\"";
		$lines[] = "\tExpiresByType image/jpeg \"access plus $imageDuration\"";
		$lines[] = "\tExpiresByType image/gif \"access plus $imageDuration\"";
		$lines[] = "\tExpiresByType image/png \"access plus $imageDuration\"";
		$lines[] = "\tExpiresByType image/webp \"access plus $imageDuration\"";
		$lines[] = "\tExpiresByType image/svg+xml \"access plus $imageDuration\"";

		// Other assets
		$lines[] = "\tExpiresByType application/pdf \"access plus 1 month\"";
		$lines[] = "\tExpiresByType application/x-shockwave-flash \"access plus 1 month\"";

		$lines[] = '</IfModule>';
	}

	/**
	 * Add URL management (redirects, pretty URLs, etc.)
	 */
	private function addURLManagement(array &$lines): void {
		$lines[] = '# ================================';
		$lines[] = '# URL MANAGEMENT';
		$lines[] = '# ================================';

		// WWW/Non-WWW Redirection
		if ($this->config['www_redirection'] !== 'none') {
			$lines[] = '';
			if ($this->config['www_redirection'] === 'www') {
				$lines[] = '# Force WWW';
				$lines[] = 'RewriteCond %{HTTP_HOST} !^www\\. [NC]';
				$lines[] = 'RewriteRule ^(.*)$ https://www.%{HTTP_HOST}/$1 [R=301,L]';
			} else {
				$lines[] = '# Force Non-WWW';
				$lines[] = 'RewriteCond %{HTTP_HOST} ^www\\. [NC]';
				$lines[] = 'RewriteRule ^(.*)$ https://%{HTTP_HOST:2}/$1 [R=301,L]';
			}
		}

		// Custom Redirects
		if ($this->config['redirect_management_enabled'] && !empty($this->config['redirect_list'])) {
			$lines[] = '';
			$lines[] = '# Custom Redirects';
			foreach ($this->config['redirect_list'] as $redirect) {
				$parts = explode(' ', trim($redirect), 3);
				if (count($parts) === 3) {
					[$oldUrl, $newUrl, $code] = $parts;
					$lines[] = "Redirect $code $oldUrl $newUrl";
				}
			}
		}

		// Pretty URLs
		if ($this->config['pretty_urls']) {
			$this->addPrettyURLsConfiguration($lines);
		}

		$lines[] = '';
	}

	/**
	 * Add comprehensive pretty URLs configuration
	 */
	private function addPrettyURLsConfiguration(array &$lines): void {
		$config = $this->config['pretty_urls_config'];
		$lines[] = '';
		$lines[] = '# ================================';
		$lines[] = '# PRETTY URLS CONFIGURATION';
		$lines[] = '# ================================';
		$lines[] = '';

		// Trailing slash handling
		if ($config['force_trailing_slash']) {
			$lines[] = '# Force trailing slash';
			$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-f';
			$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-d';
			$lines[] = 'RewriteCond %{REQUEST_URI} !(.*)/$';
			$lines[] = 'RewriteRule ^(.*)$ $1/ [L,R=301]';
			$lines[] = '';
		} else {
			$lines[] = '# Remove trailing slash';
			$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-d';
			$lines[] = 'RewriteCond %{REQUEST_URI} (.*)/$';
			$lines[] = 'RewriteRule ^(.*)/$ $1 [L,R=301]';
			$lines[] = '';
		}

		// Exclude specific directories from rewriting
		if (!empty($config['excluded_directories'])) {
			$lines[] = '# Exclude directories from URL rewriting';
			$excludedDirs = implode('|', array_map('preg_quote', $config['excluded_directories']));
			$lines[] = "RewriteCond %{REQUEST_URI} !^/($excludedDirs)(/.*)?$ [NC]";
		}

		// Exclude specific file extensions
		if (!empty($config['excluded_extensions'])) {
			$lines[] = '# Exclude file extensions from URL rewriting';
			$excludedExts = implode('|', array_map(function ($ext) {
				return preg_quote(ltrim($ext, '.'));
			}, $config['excluded_extensions']));
			$lines[] = "RewriteCond %{REQUEST_URI} !\\\.($excludedExts)$ [NC]";
		}

		// Main pretty URLs logic based on mode
		switch ($config['mode']) {
			case 'front-controller':
				$this->addFrontControllerRules($lines, $config);
				break;

			case 'extension-removal':
				$this->addExtensionRemovalRules($lines, $config);
				break;

			case 'both':
				$this->addFrontControllerRules($lines, $config);
				$lines[] = '';
				$this->addExtensionRemovalRules($lines, $config);
				break;
		}

		$lines[] = '';
	}

	/**
	 * Add front controller routing rules
	 */
	private function addFrontControllerRules(array &$lines, array $config): void {
		$lines[] = '# Front Controller Pattern - Route all requests to ' . $config['handler_file'];
		$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-f';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-d';

		if ($config['query_string_passthrough']) {
			// Pass the original URL as a parameter and preserve existing query string
			$paramName = $config['url_parameter_name'];
			$lines[] = "RewriteRule ^(.*)$ {$config['handler_file']}?{$paramName}=\$1 [QSA,L]";
			$lines[] = '';
			$lines[] = "# URL parameter: \$_GET['{$paramName}'] contains the requested path";
			$lines[] = "# Query strings: Original query parameters are preserved via QSA flag";
			$lines[] = "# Example: /blog/post-title?page=2 becomes {$config['handler_file']}?{$paramName}=blog/post-title&page=2";
		} else {
			$lines[] = "RewriteRule ^.*$ {$config['handler_file']} [L]";
			$lines[] = '';
			$lines[] = "# All requests route to {$config['handler_file']} (query strings ignored)";
		}
	}

	/**
	 * Add extension removal rules (traditional approach)
	 */
	private function addExtensionRemovalRules(array &$lines, array $config): void {
		$lines[] = '# Extension Removal - Allow access without file extensions';
		$lines[] = '';

		// PHP files
		$lines[] = '# Route extensionless URLs to PHP files';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-f';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-d';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME}.php -f';
		$lines[] = 'RewriteRule ^([^.]+)$ $1.php [L]';
		$lines[] = '';

		// HTML files
		$lines[] = '# Route extensionless URLs to HTML files';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-f';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-d';
		$lines[] = 'RewriteCond %{REQUEST_FILENAME}.html -f';
		$lines[] = 'RewriteRule ^([^.]+)$ $1.html [L]';
		$lines[] = '';

		// Redirect .php and .html to extensionless URLs (optional)
		$lines[] = '# Redirect .php and .html extensions to clean URLs';
		$lines[] = 'RewriteCond %{THE_REQUEST} \s/(.+)\.php[\s?] [NC]';
		$lines[] = 'RewriteRule ^ /%1 [R=301,L]';
		$lines[] = 'RewriteCond %{THE_REQUEST} \s/(.+)\.html[\s?] [NC]';
		$lines[] = 'RewriteRule ^ /%1 [R=301,L]';
	}

	/**
	 * Add file protection rules
	 */
	private function addFileProtection(array &$lines): void {
		$lines[] = '# ================================';
		$lines[] = '# FILE PROTECTION';
		$lines[] = '# ================================';

		// Protect Sensitive Files
		if ($this->config['protect_sensitive_files']) {
			$lines[] = '';
			$lines[] = '# Protect sensitive files';
			$lines[] = '<FilesMatch "^(\\.(htaccess|htpasswd|git|env)|wp-config\\.php|config\\.php|configuration\\.php|.*\\.log|.*\\.ini|.*\\.json)$">';
			$lines[] = "\tOrder allow,deny";
			$lines[] = "\tDeny from all";
			$lines[] = '</FilesMatch>';
		}

		// Block PHP Upload Execution
		if ($this->config['block_php_upload_exec']) {
			$lines[] = '';
			$lines[] = '# Block PHP execution in upload directories';
			$lines[] = '<DirectoryMatch "/uploads/">';
			$lines[] = "\tphp_admin_flag engine off";
			$lines[] = '</DirectoryMatch>';
		}

		// File Upload Protection
		if ($this->config['file_upload_protection']) {
			$lines[] = '';
			$lines[] = '# Block dangerous file uploads';
			$lines[] = '<FilesMatch "\\.(php|php3|php4|php5|phtml|phptml|exe|pl|py|jsp|asp|htm|shtml|sh|cgi|dll)$">';
			$lines[] = "\tOrder Deny,Allow";
			$lines[] = "\tDeny from all";
			$lines[] = '</FilesMatch>';
		}

		// WordPress Admin Protection
		if ($this->config['protect_wp_admin']) {
			$lines[] = '';
			$lines[] = '# WordPress Admin Protection';
			$lines[] = '<Files "wp-login.php">';
			$lines[] = "\tOrder Deny,Allow";
			$lines[] = "\tDeny from all";
			if (!empty($this->config['ip_whitelist'])) {
				foreach ($this->config['ip_whitelist'] as $ip) {
					$lines[] = "\tAllow from $ip";
				}
			}
			$lines[] = '</Files>';
		}

		// Protect PHP Files
		if ($this->config['protect_php_files']) {
			$lines[] = '';
			$lines[] = '# Protect PHP files from direct access';
			$lines[] = '<FilesMatch "\\.php$">';
			$lines[] = "\tOrder Allow,Deny";
			$lines[] = "\tAllow from all";
			$lines[] = "\t# Deny access to specific PHP files";
			$lines[] = "\t<FilesMatch \"(config|install|upgrade|admin)\\.php$\">";
			$lines[] = "\t\tDeny from all";
			$lines[] = "\t</FilesMatch>";
			$lines[] = '</FilesMatch>';
		}

		// Hotlink Protection
		if ($this->config['hotlink_protection_enabled']) {
			$lines[] = '';
			$lines[] = '# Hotlink Protection';
			$lines[] = 'RewriteCond %{HTTP_REFERER} !^';

			$allowedDomains = [$this->config['domain']];
			if (!empty($this->config['hotlink_protection_list'])) {
				$allowedDomains = array_merge($allowedDomains, $this->config['hotlink_protection_list']);
			}

			foreach ($allowedDomains as $domain) {
				if (!empty($domain)) {
					$lines[] = "RewriteCond %{HTTP_REFERER} !^https?://(www\\.)?$domain [NC]";
				}
			}

			$lines[] = 'RewriteRule \\.(jpg|jpeg|png|gif|bmp|webp)$ - [F,NC]';
		}

		// Block Access to Backup and Source Files
		$lines[] = '';
		$lines[] = '# Block access to backup and source files';
		$lines[] = '<FilesMatch "(\\.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$">';
		$lines[] = "\tOrder allow,deny";
		$lines[] = "\tDeny from all";
		$lines[] = "\tSatisfy All";
		$lines[] = '</FilesMatch>';

		// Prevent access to .ht* files
		$lines[] = '';
		$lines[] = '# Prevent Apache from serving .ht* files';
		$lines[] = '<FilesMatch "^\\.ht">';
		$lines[] = "\tOrder allow,deny";
		$lines[] = "\tDeny from all";
		$lines[] = "\tSatisfy All";
		$lines[] = '</FilesMatch>';

		$lines[] = '';
	}

	/**
	 * Add error page configurations
	 */
	private function addErrorPages(array &$lines): void {
		$hasErrorPages = false;
		foreach ($this->config['error_pages'] as $code => $path) {
			if ($path !== null && !empty($path)) {
				if (!$hasErrorPages) {
					$lines[] = '# ================================';
					$lines[] = '# CUSTOM ERROR PAGES';
					$lines[] = '# ================================';
					$lines[] = '';
					$hasErrorPages = true;
				}
				$lines[] = "ErrorDocument $code $path";
			}
		}

		if ($hasErrorPages) {
			$lines[] = '';
		}
	}

	/**
	 * Add custom configurations
	 */
	private function addCustomConfigurations(array &$lines): void {
		// Custom MIME Types
		if ($this->config['custom_mime_types_enabled'] && !empty($this->config['custom_mime_types'])) {
			$lines[] = '# ================================';
			$lines[] = '# CUSTOM MIME TYPES';
			$lines[] = '# ================================';
			$lines[] = '';

			foreach ($this->config['custom_mime_types'] as $mimeType) {
				$parts = explode(' ', trim($mimeType), 2);
				if (count($parts) === 2) {
					[$extension, $type] = $parts;
					$lines[] = "AddType $type $extension";
				}
			}
			$lines[] = '';
		}

		// Custom Document Root
		if ($this->config['custom_document_root']) {
			$lines[] = '# Custom Document Root';
			$lines[] = 'DocumentRoot "' . $this->config['custom_document_root'] . '"';
			$lines[] = '';
		}

		// Image Placeholder
		if ($this->config['image_placeholder']) {
			$lines[] = '# Image Placeholder for Missing Images';
			$lines[] = 'RewriteCond %{REQUEST_FILENAME} !-f';
			$lines[] = 'RewriteCond %{REQUEST_URI} \\.(gif|jpe?g|png|webp)$ [NC]';
			$lines[] = 'RewriteRule . ' . $this->config['image_placeholder'] . ' [L]';
			$lines[] = '';
		}

		// Custom Rules
		if (!empty($this->config['custom_rules'])) {
			$lines[] = '# ================================';
			$lines[] = '# CUSTOM RULES';
			$lines[] = '# ================================';
			$lines[] = '';

			foreach ($this->config['custom_rules'] as $rule) {
				$lines[] = $rule;
			}
			$lines[] = '';
		}

		// Final security measures
		$lines[] = '# ================================';
		$lines[] = '# FINAL SECURITY MEASURES';
		$lines[] = '# ================================';
		$lines[] = '';
		$lines[] = '# Prevent directory browsing';
		$lines[] = 'Options All -Indexes';
		$lines[] = '';
		$lines[] = '# Disable server signature';
		$lines[] = 'ServerSignature Off';
		$lines[] = '';
		$lines[] = '# End of .htaccess file';
	}

	/**
	 * Save the generated content to a file
	 */
	public function saveToFile(string $filePath): void {
		$content = $this->generate();

		// Create directory if it doesn't exist
		$directory = dirname($filePath);
		if (!is_dir($directory)) {
			mkdir($directory, 0755, true);
		}

		if (file_put_contents($filePath, $content) === false) {
			throw new \Exception("Failed to write .htaccess file to: $filePath");
		}
	}

	/**
	 * Get configuration value
	 */
	public function getConfig(string $key = null): mixed {
		if ($key === null) {
			return $this->config;
		}

		return $this->config[$key] ?? null;
	}

	/**
	 * Validate configuration before generation
	 */
	public function validateConfig(): array {
		$errors = [];

		// Validate domain format
		if (!empty($this->config['domain']) && !filter_var("http://{$this->config['domain']}", FILTER_VALIDATE_URL)) {
			$errors[] = "Invalid domain format: {$this->config['domain']}";
		}

		// Validate IP addresses in blacklist
		foreach ($this->config['ip_blacklist'] as $ip) {
			if (!filter_var($ip, FILTER_VALIDATE_IP) && !$this->isValidCIDR($ip)) {
				$errors[] = "Invalid IP address in blacklist: $ip";
			}
		}

		// Validate IP addresses in whitelist
		foreach ($this->config['ip_whitelist'] as $ip) {
			if (!filter_var($ip, FILTER_VALIDATE_IP) && !$this->isValidCIDR($ip)) {
				$errors[] = "Invalid IP address in whitelist: $ip";
			}
		}

		// Validate country codes
		foreach ($this->config['country_blacklist'] as $country) {
			if (!preg_match('/^[A-Z]{2}$/', $country)) {
				$errors[] = "Invalid country code: $country (must be 2-letter ISO code)";
			}
		}

		// Validate redirect format
		if ($this->config['redirect_management_enabled']) {
			foreach ($this->config['redirect_list'] as $redirect) {
				$parts = explode(' ', trim($redirect));
				if (count($parts) !== 3 || !in_array($parts[2], ['301', '302', '307'])) {
					$errors[] = "Invalid redirect format: $redirect (should be 'old_url new_url redirect_code')";
				}
			}
		}

		// Validate error page paths
		foreach ($this->config['error_pages'] as $code => $path) {
			if ($path !== null && !empty($path) && !str_starts_with($path, '/')) {
				$errors[] = "Error page path for $code should start with '/': $path";
			}
		}

		// Validate pretty URLs configuration
		if ($this->config['pretty_urls'] && isset($this->config['pretty_urls_config'])) {
			$prettyConfig = $this->config['pretty_urls_config'];

			// Validate mode
			if (!in_array($prettyConfig['mode'], ['front-controller', 'extension-removal', 'both'])) {
				$errors[] = "pretty_urls_config.mode must be 'front-controller', 'extension-removal', or 'both'";
			}

			// Validate handler file
			if (empty($prettyConfig['handler_file']) || !str_ends_with($prettyConfig['handler_file'], '.php')) {
				$errors[] = "pretty_urls_config.handler_file must be a valid PHP file path";
			}

			// Validate URL parameter name
			if (empty($prettyConfig['url_parameter_name']) || !preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/', $prettyConfig['url_parameter_name'])) {
				$errors[] = "pretty_urls_config.url_parameter_name must be a valid parameter name";
			}
		}

		return $errors;
	}

	/**
	 * Check if IP address is valid CIDR notation
	 */
	private function isValidCIDR(string $cidr): bool {
		$parts = explode('/', $cidr);
		if (count($parts) !== 2) {
			return false;
		}

		[$ip, $netmask] = $parts;

		if (!filter_var($ip, FILTER_VALIDATE_IP)) {
			return false;
		}

		$netmask = (int) $netmask;
		$maxBits = filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) ? 32 : 128;

		return $netmask >= 0 && $netmask <= $maxBits;
	}
}